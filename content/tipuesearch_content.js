var tipuesearch = {"pages": [{'title': 'First', 'text': 'About \n \n  https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'First.html'}, {'title': '5w', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n  \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n  \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n  \n    return 0;\n} \n \n', 'tags': '', 'url': '5w.html'}, {'title': '6w', 'text': '#include <stdio.h> #include <gd.h> #include <math.h> \n void draw_roc_flag(gdImagePtr img); void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue); \n int main() {  // width 3: height 2  int width = 1200;  int height = (int)(width*2.0 / 3.0); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_roc_flag(img); \n FILE *outputFile = fopen("./roc_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  }  gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0; } \n void draw_roc_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  int center_x = (int)(width/4);  int center_y = (int)(height/4);  int sun_radius = (int)(width/8); \n // Colors for the flag  red = gdImageColorAllocate(img, 242, 0, 0); // Red color  white = gdImageColorAllocate(img, 255, 255, 255); // White stripes  blue = gdImageColorAllocate(img, 0, 41, 204); // Blue \n // 繪製紅色矩形區域  gdImageFilledRectangle(img, 0, 0, width, height, red); \n // 繪製藍色矩形區域  gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); \n // 繪製太陽  draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue); } void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {  float angle = 0;  int numRays = 12; // 光芒的數量 \n gdPoint points[3]; // 三個頂點的陣列 \n for (int i = 0; i < numRays; i++) {  angle = i * (2 * M_PI / numRays);  float x1 = center_x + cos(angle) * sun_radius;  float y1 = center_y + sin(angle) * sun_radius; \n // 調整兩個底邊頂點的位置  float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);  float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);  float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);  float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5); \n // 設定多邊形的三個頂點  points[0].x = (int)x1;  points[0].y = (int)y1;  points[1].x = (int)x2;  points[1].y = (int)y2;  points[2].x = (int)x3;  points[2].y = (int)y3; \n gdImageFilledPolygon(img, points, 3, white);  }  //外圈  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue); \n // 繪製太陽內部  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white); } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_usa_flag(gdImagePtr img); void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n int main() {  int width = 800;  int height = (int)(width / 1.9); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_usa_flag(img); \n FILE *outputFile = fopen("./../images/usa_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时出错。\\n");  return 1;  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n void draw_usa_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  // 国旗颜色  red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹  white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹  blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形 \n int stripe_height = height / 13;  int stripe_width = width;  int star_size = (int)(0.0308 * height); // 星星大小 \n for (int y = 0; y < height; y += stripe_height) {  if (y / stripe_height % 2 == 0) {  gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);  } else {  gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);  }  } \n gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue); \n int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距  int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距  int star_start_x = (int)(0.125 * height); // 星星的起始X位置  int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置 \n for (int row = 0; row < 9; row++) {  int starsPerRow = (row % 2 == 0) ? 6 : 5; \n // 计算2、4、6和8排星星的偏移量  int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0; \n for (int star = 0; star < starsPerRow; star++) {  int x = star_start_x + star * star_spacing_x + offset_x; \n // 旋转角度（以弧度为单位）  double rotation_angle = M_PI / 5; // 忘記多少度的旋转 \n int y = star_start_y + row * star_spacing_y;  draw_star(img, x, y, star_size, white, rotation_angle);  }  } } \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {  gdPoint points[10]; \n for (int i = 0; i < 10; i++) {  double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;  int radius = (i % 2 == 0) ? size : size / 2;  points[i].x = x + radius * cos(angle);  points[i].y = y + radius * sin(angle);  } \n // 用指定的颜色填充星星  gdImageFilledPolygon(img, points, 10, color); } \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_chinese_flag(gdImagePtr img);\n \nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n \n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n \n    draw_chinese_flag(im);\n \n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n \n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n \n    return 0;\n}\n \n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n \nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n \n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n \n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n \n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n \n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n \n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n \n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n \n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n \n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n \n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_japan_flag(img);\n \n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n \n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    \n \n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n \n \n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n \nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n \n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    // 绘制英国国旗\n    draw_uk_flag(img);\n \n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \n \n \nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n \n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n \n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n \n \n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n \n    int x1, y1, x2, y2, x3, y3;\n \n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n \n     \n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n \n  int x1, y1, x2, y2, x3, y3;\n   \n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n   \n   \n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n \n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n     \n   \n  }\n   \n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n \n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n \n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n', 'tags': '', 'url': '6w.html'}, {'title': 'C_EX', 'text': '1.\xa0 \n #include <stdio.h> \n void main() {  float a = 0.5;  double b = 1.2;  int c = 3; \n b = b + a + c; // 浮点数和整数之间的运算 \n /* 输出 a、b、c 到屏幕 */  printf("a = %3.1f, b = %3.1f, c = %d", a, b, c); } \n \n \n 2. \n #include <stdio.h> \n int main() {  char x, y;  x = \'a\';  y = (char)97; \n /* 输出 x, y, 以及 y 的 ASCII 值 */  printf("x = %c, y = %c, y 的 ASCII 值 = %d", x, y, y); \n return 0; } \n \n \n 3. \n #include <stdio.h> \n int main() {  int a = 64;  int b = 0x40; // 以十六进制表示  long c = 64L; \n printf("%d, %d, %ld", a, b, c); \n return 0; } \n \n \n 4. \n #include <stdio.h> \n int main() {  int i;  printf("输入一个整数：");  scanf("%d", &i); /* 使用 &（地址运算符）获取变量 i 的地址 */  printf("输入的数字是 %d", i); \n return 0; } \n \n 5. \n #include <stdio.h> \n int main() {  int a, b;  a = 10; b = 3; \n printf("%d \\n", a * b); // 乘法  printf("%d \\n", a / b); // 除法  printf("%d \\n", a + b); // 加法  printf("%d \\n", a - b); // 减法  printf("%d \\n", a % b); // 求余 \n return 0; } \n \n 6. \n #include <stdio.h> \n int main() {  int a = 10, b = 5; \n printf("a == b is %d \\n", a == b); // 等于  printf("a > b is %d \\n", a > b); // 大于  printf("a < b is %d \\n", a < b); // 小于  printf("a >= b is %d \\n", a >= b); // 大于等于  printf("a <= b is %d \\n", a <= b); // 小于等于  printf("a != b is %d \\n", a != b); // 不等于 \n printf("\\n"); \n b = 10;  printf("a == b is %d \\n", a == b); // 等于  printf("a > b is %d \\n", a > b); // 大于  printf("a < b is %d \\n", a < b); // 小于  printf("a >= b is %d \\n", a >= b); // 大于等于  printf("a <= b is %d \\n", a <= b); // 小于等于  printf("a != b is %d \\n", a != b); // 不等于 \n return 0; } \n \n 7. \n #include <stdio.h> \n void main() {  int a, b;  a = 15;  b = 1; \n printf("%d \\n", a | b); /* a OR b（按位或运算） */  printf("%d \\n", a & b); /* a AND b（按位与运算） */  printf("%d \\n", a ^ b); /* a XOR b（按位异或运算） */  printf("%d \\n", a << 1); /* a 位元左移 1 位 */  printf("%d \\n", a >> 1); /* a 位元右移一位 */  printf("%d \\n", ~a); /* a 的补码运算 */ \n return 0; } \n \n 8. \n #include <stdio.h> \n void main() {  int a;  a = 3;  printf("%d\\n", !a); /* 打印 a 的逻辑非结果（a 不为 0，则逻辑非为 0） */ \n a = 0;  printf("%d\\n", !a); /* 打印 a 的逻辑非结果（a 为 0，则逻辑非为 1） */ \n return 0; } \n \n 9. \n #include <stdio.h> \n void main() {  printf("%d\\n", 1 && 3); /* 打印两个表达式的逻辑与结果（两者都为真，则结果为真） */  printf("%d\\n", 0 && 0); /* 打印两个表达式的逻辑与结果（只要有一个为假，则结果为假） */  printf("%d\\n", 2 && 2); /* 打印两个表达式的逻辑与结果（两者都为真，则结果为真） */ \n return 0; } \n \n 10. \n #include <stdio.h> \n void main() {  char a;  printf("int 类型的大小为 %d 字节\\n", sizeof(int));  printf("char 类型变量 a 的大小为 %d 字节\\n", sizeof(a)); \n return 0; } \n \n \n 1. \n #include <stdio.h> \n /* 读取和显示一个字符 */ int main() {  char c; \n printf("请输入一个字符： ");  c = getchar(); /* 读取输入的字符 */    printf("输入的字符是： ");  putchar(c); /* 输出字符 */ \n return 0; } \n \n \n 2. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 读取两个整数，计算它们的总和并打印结果 */ int main() {  int this_is_a_number1, this_is_a_number2, total; \n printf("请输入一个整数：\\n ");  scanf("%d", &this_is_a_number1); /* 读取输入的整数 */  printf("你输入了 %d\\n", this_is_a_number1); \n printf("请输入另一个整数：\\n ");  scanf("%d", &this_is_a_number2); /* 读取输入的整数 */  printf("你输入了 %d\\n", this_is_a_number2); \n total = this_is_a_number1 + this_is_a_number2; /* 计算两个整数的总和 */  printf("总和为 %d\\n", total); \n return 0; } \n \n \n 3. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 读取两个浮点数，计算它们的总和并打印结果 */ int main() {  float this_is_a_number1, this_is_a_number2, total; \n printf("请输入一个小数：\\n ");  scanf("%f", &this_is_a_number1); /* 读取输入的浮点数 */  printf("你输入了 %f\\n", this_is_a_number1); \n printf("请输入另一个小数：\\n ");  scanf("%f", &this_is_a_number2); /* 读取输入的浮点数 */  printf("你输入了 %f\\n", this_is_a_number2); \n total = this_is_a_number1 + this_is_a_number2; /* 计算两个浮点数的总和 */  printf("总和为 %f\\n", total); \n return 0; } \n \n \n 4. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 读取两个浮点数，计算它们的乘积并打印结果 */ int main() {  float this_is_a_number1, this_is_a_number2, total; \n printf("请输入一个小数：\\n ");  scanf("%f", &this_is_a_number1); /* 读取输入的浮点数 */  printf("你输入了 %f\\n", this_is_a_number1); \n printf("请输入另一个小数：\\n ");  scanf("%f", &this_is_a_number2); /* 读取输入的浮点数 */  printf("你输入了 %f\\n", this_is_a_number2); \n total = this_is_a_number1 * this_is_a_number2; /* 计算两个浮点数的乘积 */  printf("乘积为 %f\\n", total); \n return 0; } \n \n \n 5. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 除法：计算两个浮点数的商 */ int main() {  float this_is_a_number1, this_is_a_number2, total; \n printf("请输入一个数字：\\n");  scanf("%f", &this_is_a_number1); /* 读取输入的数字 */  printf("你输入了 %f\\n", this_is_a_number1); \n printf("请输入另一个数字：\\n");  scanf("%f", &this_is_a_number2); /* 读取输入的数字 */  printf("你输入了 %f\\n", this_is_a_number2); \n total = this_is_a_number1 / this_is_a_number2; /* 计算两个数字的商 */  printf("商为 %f\\n", total); \n return 0; } \n \n \n 6. \n ##define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 演示 for 循环：计算用户输入的十个浮点数的总和 */ int main() {  float this_is_a_number, total;  int i; \n total = 0; \n /* for 循环执行 10 次 */  for (i = 0; i < 10; i++)  {  printf("请输入一个数字：\\n");  scanf("%f", &this_is_a_number); /* 读取输入的数字 */  total = total + this_is_a_number;  } \n printf("总和为：%f\\n", total); \n return 0; } \n \n \n 7. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 演示嵌套的 for 循环：计算用户输入的二维数组（10行2列）的总和 */ int main() {  float this_is_a_number, total;  int i, j; \n total = 0; \n /* 外部 for 循环执行 10 次 */  for (i = 0; i < 10; i++)  {  /* 内部 for 循环执行 2 次 */  for (j = 0; j < 2; j++)  {  printf("请输入一个数字：\\n");  scanf("%f", &this_is_a_number); /* 读取输入的数字 */  total = total + this_is_a_number;  }  } \n printf("总和为：%f\\n", total); \n return 0; } \n \n \n 8. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* 演示 do-while 循环：计算用户输入的十个浮点数的总和 */ int main() {  float this_is_a_number, total;  int i; \n total = 0;  i = 0; \n /* do-while 循环执行，直到 i 的值达到 10 */  do  {  printf("请输入一个数字：\\n");  scanf("%f", &this_is_a_number); /* 读取输入的数字 */  total = total + this_is_a_number;  i++;  } while (i < 10); \n printf("总和为：%f\\n", total); \n return 0; } \n \n 9. \n #define _CRT_SECURE_NO_WARNINGS #include <stdio.h> \n /* switch语句示例：根据用户输入的整数值执行不同的操作 */ int main() {  int this_is_a_number; \n printf("请输入一个介于1和5之间的整数：\\n ");  scanf("%d", &this_is_a_number); \n switch (this_is_a_number)  {  case 1:  printf("Case1: 值是：%d", this_is_a_number);  break;  case 2:  printf("Case2: 值是：%d", this_is_a_number);  break;  case 3:  printf("Case3: 值是：%d", this_is_a_number);  break;  case 4:  printf("Case4: 值是：%d", this_is_a_number);  break;  case 5:  printf("Case5: 值是：%d", this_is_a_number);  break;  default:  printf("错误：值是：%d", this_is_a_number); /* 输入的数字不在1和5之间 */  } \n return 0; } \n \n \n 10. \n #include <stdio.h> \n /* if语句示例：根据用户输入的整数值执行不同的条件分支 */ int main() {  int this_is_a_number; \n printf("请输入一个介于1和10之间的整数：\\n ");  scanf("%d", &this_is_a_number); \n if (this_is_a_number < 6)  {  printf("这个数字小于6;\\n ");  } \n printf("请输入一个介于10和20之间的整数：\\n ");  scanf("%d", &this_is_a_number); \n if (this_is_a_number < 16)  {  printf("这个数字小于16\\n ");  }  else  {  printf("这个数字大于等于16\\n ");  } \n return 0; } \n', 'tags': '', 'url': 'C_EX.html'}, {'title': 'W12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n \nfprintf(stderr, "Error opening the output file.\\n");\n \nreturn 1;\n    }\n    \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n    \n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n    \n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n \n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n \n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n \n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n \n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n \n        t += dt;\n    }\n \n    // Close the data file\n    fclose(outputFile);\n \n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n \n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n \n    return 0;\n} \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'ANSIC', 'text': '#include <stdio.h>\n\nint main(int argc, char** argv) {\n    // 检查C标准版本\n    #if __STDC_VERSION__ >=  201710L\n        printf("我们正在使用 C18 标准!\\n");\n    #elif __STDC_VERSION__ >= 201112L\n        printf("我们正在使用 C11 标准!\\n");\n    #elif __STDC_VERSION__ >= 199901L\n        printf("我们正在使用 C99 标准!\\n");\n    #else\n        printf("我们正在使用 C89/C90 标准!\\n");\n    #endif\n\n    // 表示程序成功执行\n    return 0;\n}\n \n \n #include <stdio.h> \n int main(int argc, char** argv) {  // 检查C标准版本  #if __STDC_VERSION__ >= 201710L  printf("我们正在使用 C18 标准!\\n");  #elif __STDC_VERSION__ >= 201112L  printf("我们正在使用 C11 标准!\\n");  #elif __STDC_VERSION__ >= 199901L  printf("我们正在使用 C99 标准!\\n");  #else  printf("我们正在使用 C89/C90 标准!\\n");  #endif \n // 表示程序成功执行  return 0; } \n \n \n \xa0#include <stdio.h> \n int main()  {  // 打印一行井号  printf("######\\n"); \n // 打印一个井号  printf("#\\n"); \n // 打印一个井号  printf("#\\n"); \n // 打印一行井号  printf("#####\\n"); \n // 打印一个井号  printf("#\\n"); \n // 打印一个井号  printf("#\\n"); \n // 打印一个井号  printf("#\\n"); \n return 0; } \n \n \n #include <stdio.h> \n int main()  {  // 声明并初始化字符变量  char char1 = \'X\';  char char2 = \'M\';  char char3 = \'L\'; \n // 打印原始和反转顺序的字符  printf("%c%c%c的反转是%c%c%c\\n",  char1, char2, char3,  char3, char2, char1); \n return 0; } \n \n \n #include <stdio.h> \n /*   用于存储矩形宽度和高度的变量（单位：英寸） */ int width;  int height; \n int area; /* 用于存储矩形的面积的变量 */ int perimeter; /* 用于存储矩形的周长的变量 */ \n int main() {  /* 给高度和宽度赋值 */  height = 7;  width = 5; \n /* 计算矩形的周长 */  perimeter = 2 * (height + width);  printf("矩形的周长 = %d 英寸\\n", perimeter); \n /* 计算矩形的面积 */  area = height * width;  printf("矩形的面积 = %d 平方英寸\\n", area); \n return 0; } \n \n \n #include <stdio.h> \n int main() {  int radius; /* 用于存储圆的半径的变量 */  float area, perimeter; /* 用于存储圆的面积和周长的变量 */   radius = 6; /* 为半径赋值 */ \n /* 计算圆的周长 */  perimeter = 2 * 3.14 * radius;  printf("圆的周长 = %f 英寸\\n", perimeter); \n /* 计算圆的面积 */  area = 3.14 * radius * radius;  printf("圆的面积 = %f 平方英寸\\n", area); \n return 0; } \n \n \n #include <stdio.h> \n int main() {  int a = 125, b = 12345; /* 声明并初始化整数变量 */  long ax = 1234567890; /* 声明并初始化长整数变量 */  short s = 4043; /* 声明并初始化短整数变量 */  float x = 2.13459; /* 声明并初始化浮点数变量 */  double dx = 1.1415927; /* 声明并初始化双精度浮点数变量 */  char c = \'W\'; /* 声明并初始化字符变量 */  unsigned long ux = 2541567890; /* 声明并初始化无符号长整数变量 */ \n /* 不同的算术运算和类型转换 */  printf("a + c = %d\\n", a + c);  printf("x + c = %f\\n", x + c);  printf("dx + x = %f\\n", dx + x);  printf("((int) dx) + ax = %ld\\n", ((int) dx) + ax);  printf("a + x = %f\\n", a + x);  printf("s + b = %d\\n", s + b);  printf("ax + b = %ld\\n", ax + b);  printf("s + c = %hd\\n", s + c);  printf("ax + c = %ld\\n", ax + c);  printf("ax + ux = %lu\\n", ax + ux); \n return 0; } \n \n \n #include <stdio.h> \n int main() {  int days, years, weeks; \n days = 1329; // 总天数 \n // 将天数转换为年、周和天  years = days / 365; // 计算年  weeks = (days % 365) / 7; // 计算周  days = days - ((years * 365) + (weeks * 7)); // 计算剩余天数 \n // 打印结果  printf("年: %d\\n", years);  printf("周: %d\\n", weeks);  printf("天: %d \\n", days); \n return 0; } \n \n \n #include <stdio.h> \n int main()  {  int x, y, sum; // 声明变量，用于存储两个整数及它们的和 \n // 提示用户输入，并将其存储在 \'x\' 中  printf("\\n输入第一个整数：");   scanf("%d", &x); \n // 提示用户输入，并将其存储在 \'y\' 中  printf("\\n输入第二个整数：");  scanf("%d", &y); \n sum = x + y; // 计算 \'x\' 和 \'y\' 的和 \n // 打印和  printf("\\n上述两个整数的和 = %d\\n", sum); \n return 0; // 表示程序成功执行 } \n \n \xa0 \n #include <stdio.h> \n int main()  {  int x, y, result; // 声明变量，用于存储两个整数及它们的乘积 \n // 提示用户输入，并将其存储在 \'x\' 中  printf("\\n输入第一个整数：");   scanf("%d", &x); \n // 提示用户输入，并将其存储在 \'y\' 中  printf("\\n输入第二个整数：");  scanf("%d", &y); \n result = x * y; // 计算 \'x\' 和 \'y\' 的乘积 \n // 打印乘积  printf("上述两个整数的乘积 = %d\\n", result); \n return 0; // 表示程序成功执行 } \n \n \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};