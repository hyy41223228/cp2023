<h1>First</h1>
<p><br/><br/>About</p>
<p></p>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<h1>5w</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p><br/><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>6w</h1>
<p>#include &lt;stdio.h&gt;<br/>#include &lt;gd.h&gt;<br/>#include &lt;math.h&gt;</p>
<p>void draw_roc_flag(gdImagePtr img);<br/>void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);</p>
<p>int main() {<br/> // width 3: height 2<br/> int width = 1200;<br/> int height = (int)(width*2.0 / 3.0);</p>
<p>gdImagePtr img = gdImageCreateTrueColor(width, height);<br/> gdImageAlphaBlending(img, 0);</p>
<p>draw_roc_flag(img);</p>
<p>FILE *outputFile = fopen("./roc_flag.png", "wb");<br/> if (outputFile == NULL) {<br/> fprintf(stderr, "Error opening the output file.\n");<br/> return 1;<br/> }<br/> gdImagePngEx(img, outputFile, 9);<br/> fclose(outputFile);<br/> gdImageDestroy(img);<br/> return 0;<br/>}</p>
<p>void draw_roc_flag(gdImagePtr img) {<br/> int width = gdImageSX(img);<br/> int height = gdImageSY(img);<br/> int red, white, blue;<br/> int center_x = (int)(width/4);<br/> int center_y = (int)(height/4);<br/> int sun_radius = (int)(width/8);</p>
<p>// Colors for the flag<br/> red = gdImageColorAllocate(img, 242, 0, 0); // Red color<br/> white = gdImageColorAllocate(img, 255, 255, 255); // White stripes<br/> blue = gdImageColorAllocate(img, 0, 41, 204); // Blue</p>
<p>// 繪製紅色矩形區域<br/> gdImageFilledRectangle(img, 0, 0, width, height, red);</p>
<p>// 繪製藍色矩形區域<br/> gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);</p>
<p>// 繪製太陽<br/> draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);<br/>}<br/>void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {<br/> float angle = 0;<br/> int numRays = 12; // 光芒的數量</p>
<p>gdPoint points[3]; // 三個頂點的陣列</p>
<p>for (int i = 0; i &lt; numRays; i++) {<br/> angle = i * (2 * M_PI / numRays);<br/> float x1 = center_x + cos(angle) * sun_radius;<br/> float y1 = center_y + sin(angle) * sun_radius;</p>
<p>// 調整兩個底邊頂點的位置<br/> float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);<br/> float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);<br/> float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);<br/> float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);</p>
<p>// 設定多邊形的三個頂點<br/> points[0].x = (int)x1;<br/> points[0].y = (int)y1;<br/> points[1].x = (int)x2;<br/> points[1].y = (int)y2;<br/> points[2].x = (int)x3;<br/> points[2].y = (int)y3;</p>
<p>gdImageFilledPolygon(img, points, 3, white);<br/> }<br/> //外圈<br/> gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);</p>
<p>// 繪製太陽內部<br/> gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);<br/>}</p>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<p>#include &lt;stdio.h&gt;<br/>#include &lt;gd.h&gt;<br/>#include &lt;math.h&gt;</p>
<p>void draw_usa_flag(gdImagePtr img);<br/>void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);</p>
<p>int main() {<br/> int width = 800;<br/> int height = (int)(width / 1.9);</p>
<p>gdImagePtr img = gdImageCreateTrueColor(width, height);<br/> gdImageAlphaBlending(img, 0);</p>
<p>draw_usa_flag(img);</p>
<p>FILE *outputFile = fopen("./../images/usa_flag.png", "wb");<br/> if (outputFile == NULL) {<br/> fprintf(stderr, "打开输出文件时出错。\n");<br/> return 1;<br/> }</p>
<p>gdImagePngEx(img, outputFile, 9);<br/> fclose(outputFile);<br/> gdImageDestroy(img);</p>
<p>return 0;<br/>}</p>
<p>void draw_usa_flag(gdImagePtr img) {<br/> int width = gdImageSX(img);<br/> int height = gdImageSY(img);<br/> int red, white, blue;<br/> // 国旗颜色<br/> red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹<br/> white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹<br/> blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形</p>
<p>int stripe_height = height / 13;<br/> int stripe_width = width;<br/> int star_size = (int)(0.0308 * height); // 星星大小</p>
<p>for (int y = 0; y &lt; height; y += stripe_height) {<br/> if (y / stripe_height % 2 == 0) {<br/> gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);<br/> } else {<br/> gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);<br/> }<br/> }</p>
<p>gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);</p>
<p>int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距<br/> int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距<br/> int star_start_x = (int)(0.125 * height); // 星星的起始X位置<br/> int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置</p>
<p>for (int row = 0; row &lt; 9; row++) {<br/> int starsPerRow = (row % 2 == 0) ? 6 : 5;</p>
<p>// 计算2、4、6和8排星星的偏移量<br/> int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;</p>
<p>for (int star = 0; star &lt; starsPerRow; star++) {<br/> int x = star_start_x + star * star_spacing_x + offset_x;</p>
<p>// 旋转角度（以弧度为单位）<br/> double rotation_angle = M_PI / 5; // 忘記多少度的旋转</p>
<p>int y = star_start_y + row * star_spacing_y;<br/> draw_star(img, x, y, star_size, white, rotation_angle);<br/> }<br/> }<br/>}</p>
<p>void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {<br/> gdPoint points[10];</p>
<p>for (int i = 0; i &lt; 10; i++) {<br/> double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;<br/> int radius = (i % 2 == 0) ? size : size / 2;<br/> points[i].x = x + radius * cos(angle);<br/> points[i].y = y + radius * sin(angle);<br/> }</p>
<p>// 用指定的颜色填充星星<br/> gdImageFilledPolygon(img, points, 10, color);<br/>}</p>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_chinese_flag(gdImagePtr img);
 
int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度
 
    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);
 
    draw_chinese_flag(im);
 
    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }
 
    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);
 
    return 0;
}
 
// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);
 
void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;
 
    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星
 
    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);
 
    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);
 
    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);
 
    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);
 
    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}
 
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];
 
    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;
 
    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }
 
    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/><br/><br/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
 
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_japan_flag(img);
 
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
 
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    
 
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
 
 
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);
 
int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;
 
    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    // 绘制英国国旗
    draw_uk_flag(img);
 
    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
 
 
void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
 
    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色
 
    gdImageFilledRectangle(img, 0, 0, width, height, blue);
 
 
  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);
 
    int x1, y1, x2, y2, x3, y3;
 
    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);
 
    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);
 
     
    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);
 
  int x1, y1, x2, y2, x3, y3;
   
  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );
   
   
  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);
 
 
  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);
     
   
  }
   
    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;
 
    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);
 
    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<h1>C_EX</h1>
<p>#include &lt;stdio.h&gt;</p>
<p>void main()<br/>{<br/> float a = 0.5;<br/> double b = 1.2;<br/> int c = 3;</p>
<p>b = b + a + c; // 浮点数和整数之间的运算</p>
<p>/* 输出 a、b、c 到屏幕 */<br/> printf("a = %3.1f, b = %3.1f, c = %d", a, b, c);<br/>}</p>
<p><img alt="" height="40" src="/images/螢幕擷取畫面 2023-12-21 025413.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> char x, y;<br/> x = 'a';<br/> y = (char)97;</p>
<p>/* 输出 x, y, 以及 y 的 ASCII 值 */<br/> printf("x = %c, y = %c, y 的 ASCII 值 = %d", x, y, y);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="55" src="/images/螢幕擷取畫面 2023-12-21 025439.png" width="512"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int a = 64;<br/> int b = 0x40; // 以十六进制表示<br/> long c = 64L;</p>
<p>printf("%d, %d, %ld", a, b, c);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="168" src="/images/螢幕擷取畫面 2023-12-21 035534.png" width="500"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int i;<br/> printf("输入一个整数：");<br/> scanf("%d", &amp;i); /* 使用 &amp;（地址运算符）获取变量 i 的地址 */<br/> printf("输入的数字是 %d", i);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="99" src="/images/螢幕擷取畫面 2023-12-21 025610.png" width="500"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int a, b;<br/> a = 10; b = 3;</p>
<p>printf("%d \n", a * b); // 乘法<br/> printf("%d \n", a / b); // 除法<br/> printf("%d \n", a + b); // 加法<br/> printf("%d \n", a - b); // 减法<br/> printf("%d \n", a % b); // 求余</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="120" src="/images/螢幕擷取畫面 2023-12-21 025634.png" width="400"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int a = 10, b = 5;</p>
<p>printf("a == b is %d \n", a == b); // 等于<br/> printf("a &gt; b is %d \n", a &gt; b); // 大于<br/> printf("a &lt; b is %d \n", a &lt; b); // 小于<br/> printf("a &gt;= b is %d \n", a &gt;= b); // 大于等于<br/> printf("a &lt;= b is %d \n", a &lt;= b); // 小于等于<br/> printf("a != b is %d \n", a != b); // 不等于</p>
<p>printf("\n");</p>
<p>b = 10;<br/> printf("a == b is %d \n", a == b); // 等于<br/> printf("a &gt; b is %d \n", a &gt; b); // 大于<br/> printf("a &lt; b is %d \n", a &lt; b); // 小于<br/> printf("a &gt;= b is %d \n", a &gt;= b); // 大于等于<br/> printf("a &lt;= b is %d \n", a &lt;= b); // 小于等于<br/> printf("a != b is %d \n", a != b); // 不等于</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="243" src="/images/螢幕擷取畫面 2023-12-21 025642.png" width="300"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>void main()<br/>{<br/> int a, b;<br/> a = 15;<br/> b = 1;</p>
<p>printf("%d \n", a | b); /* a OR b（按位或运算） */<br/> printf("%d \n", a &amp; b); /* a AND b（按位与运算） */<br/> printf("%d \n", a ^ b); /* a XOR b（按位异或运算） */<br/> printf("%d \n", a &lt;&lt; 1); /* a 位元左移 1 位 */<br/> printf("%d \n", a &gt;&gt; 1); /* a 位元右移一位 */<br/> printf("%d \n", ~a); /* a 的补码运算 */</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="141" src="/images/螢幕擷取畫面 2023-12-21 025654.png" width="300"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>void main()<br/>{<br/> int a;<br/> a = 3;<br/> printf("%d\n", !a); /* 打印 a 的逻辑非结果（a 不为 0，则逻辑非为 0） */</p>
<p>a = 0;<br/> printf("%d\n", !a); /* 打印 a 的逻辑非结果（a 为 0，则逻辑非为 1） */</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="67" src="/images/螢幕擷取畫面 2023-12-21 025659.png" width="300"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>void main()<br/>{<br/> printf("%d\n", 1 &amp;&amp; 3); /* 打印两个表达式的逻辑与结果（两者都为真，则结果为真） */<br/> printf("%d\n", 0 &amp;&amp; 0); /* 打印两个表达式的逻辑与结果（只要有一个为假，则结果为假） */<br/> printf("%d\n", 2 &amp;&amp; 2); /* 打印两个表达式的逻辑与结果（两者都为真，则结果为真） */</p>
<p>return 0;<br/>}</p>
<p><img caption="false" height="90" src="/images/螢幕擷取畫面 2023-12-21 025704.png" width="300"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>void main()<br/>{<br/> char a;<br/> printf("int 类型的大小为 %d 字节\n", sizeof(int));<br/> printf("char 类型变量 a 的大小为 %d 字节\n", sizeof(a));</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="215" src="/images/螢幕擷取畫面 2023-12-21 025742.png" width="500"/></p><h1>W12</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
int main() {
    int width = 800;
    int height = 600;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {
 
fprintf(stderr, "Error opening the output file.\n");
 
return 1;
    }
    
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);
    
    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);
    
    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);
 
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="400" src="/images/hellogd.png" width="533"/></p>
<h1>W13</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }
 
    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time
 
    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;
 
        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);
 
        t += dt;
    }
 
    // Close the data file
    fclose(outputFile);
 
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");
 
    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>ANSIC</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main(int argc, char** argv) {
    // 检查C标准版本
    #if __STDC_VERSION__ &gt;=  201710L
        printf("我们正在使用 C18 标准!\n");
    #elif __STDC_VERSION__ &gt;= 201112L
        printf("我们正在使用 C11 标准!\n");
    #elif __STDC_VERSION__ &gt;= 199901L
        printf("我们正在使用 C99 标准!\n");
    #else
        printf("我们正在使用 C89/C90 标准!\n");
    #endif

    // 表示程序成功执行
    return 0;
}
</pre>
<p><img alt="" height="122" src="/images/螢幕擷取畫面 2023-12-20 191959.png" width="200"/><br/><br/></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main(int argc, char** argv) {<br/> // 检查C标准版本<br/> #if __STDC_VERSION__ &gt;= 201710L<br/> printf("我们正在使用 C18 标准!\n");<br/> #elif __STDC_VERSION__ &gt;= 201112L<br/> printf("我们正在使用 C11 标准!\n");<br/> #elif __STDC_VERSION__ &gt;= 199901L<br/> printf("我们正在使用 C99 标准!\n");<br/> #else<br/> printf("我们正在使用 C89/C90 标准!\n");<br/> #endif</p>
<p>// 表示程序成功执行<br/> return 0;<br/>}</p>
<p><img alt="" height="65" src="/images/螢幕擷取畫面 2023-12-20 192136.png" width="200"/></p>
<p></p>
<p> #include &lt;stdio.h&gt;</p>
<p>int main() <br/>{<br/> // 打印一行井号<br/> printf("######\n");</p>
<p>// 打印一个井号<br/> printf("#\n");</p>
<p>// 打印一个井号<br/> printf("#\n");</p>
<p>// 打印一行井号<br/> printf("#####\n");</p>
<p>// 打印一个井号<br/> printf("#\n");</p>
<p>// 打印一个井号<br/> printf("#\n");</p>
<p>// 打印一个井号<br/> printf("#\n");</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="130" src="/images/螢幕擷取畫面 2023-12-20 192728.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() <br/>{<br/> // 声明并初始化字符变量<br/> char char1 = 'X';<br/> char char2 = 'M';<br/> char char3 = 'L';</p>
<p>// 打印原始和反转顺序的字符<br/> printf("%c%c%c的反转是%c%c%c\n",<br/> char1, char2, char3,<br/> char3, char2, char1);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="44" src="/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202023-12-20%20192906.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>/* <br/> 用于存储矩形宽度和高度的变量（单位：英寸）<br/>*/<br/>int width; <br/>int height;</p>
<p>int area; /* 用于存储矩形的面积的变量 */<br/>int perimeter; /* 用于存储矩形的周长的变量 */</p>
<p>int main() {<br/> /* 给高度和宽度赋值 */<br/> height = 7;<br/> width = 5;</p>
<p>/* 计算矩形的周长 */<br/> perimeter = 2 * (height + width);<br/> printf("矩形的周长 = %d 英寸\n", perimeter);</p>
<p>/* 计算矩形的面积 */<br/> area = height * width;<br/> printf("矩形的面积 = %d 平方英寸\n", area);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="53" src="/images/螢幕擷取畫面 2023-12-20 193144.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int radius; /* 用于存储圆的半径的变量 */<br/> float area, perimeter; /* 用于存储圆的面积和周长的变量 */ <br/> radius = 6; /* 为半径赋值 */</p>
<p>/* 计算圆的周长 */<br/> perimeter = 2 * 3.14 * radius;<br/> printf("圆的周长 = %f 英寸\n", perimeter);</p>
<p>/* 计算圆的面积 */<br/> area = 3.14 * radius * radius;<br/> printf("圆的面积 = %f 平方英寸\n", area);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="45" src="/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202023-12-20%20193435.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int a = 125, b = 12345; /* 声明并初始化整数变量 */<br/> long ax = 1234567890; /* 声明并初始化长整数变量 */<br/> short s = 4043; /* 声明并初始化短整数变量 */<br/> float x = 2.13459; /* 声明并初始化浮点数变量 */<br/> double dx = 1.1415927; /* 声明并初始化双精度浮点数变量 */<br/> char c = 'W'; /* 声明并初始化字符变量 */<br/> unsigned long ux = 2541567890; /* 声明并初始化无符号长整数变量 */</p>
<p>/* 不同的算术运算和类型转换 */<br/> printf("a + c = %d\n", a + c);<br/> printf("x + c = %f\n", x + c);<br/> printf("dx + x = %f\n", dx + x);<br/> printf("((int) dx) + ax = %ld\n", ((int) dx) + ax);<br/> printf("a + x = %f\n", a + x);<br/> printf("s + b = %d\n", s + b);<br/> printf("ax + b = %ld\n", ax + b);<br/> printf("s + c = %hd\n", s + c);<br/> printf("ax + c = %ld\n", ax + c);<br/> printf("ax + ux = %lu\n", ax + ux);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="157" src="/images/%E8%9E%A2%E5%B9%95%E6%93%B7%E5%8F%96%E7%95%AB%E9%9D%A2%202023-12-20%20193651.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int days, years, weeks;</p>
<p>days = 1329; // 总天数</p>
<p>// 将天数转换为年、周和天<br/> years = days / 365; // 计算年<br/> weeks = (days % 365) / 7; // 计算周<br/> days = days - ((years * 365) + (weeks * 7)); // 计算剩余天数</p>
<p>// 打印结果<br/> printf("年: %d\n", years);<br/> printf("周: %d\n", weeks);<br/> printf("天: %d \n", days);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="90" src="/images/螢幕擷取畫面 2023-12-21 005615.png" width="200"/></p>
<p></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() <br/>{<br/> int x, y, sum; // 声明变量，用于存储两个整数及它们的和</p>
<p>// 提示用户输入，并将其存储在 'x' 中<br/> printf("\n输入第一个整数："); <br/> scanf("%d", &amp;x);</p>
<p>// 提示用户输入，并将其存储在 'y' 中<br/> printf("\n输入第二个整数：");<br/> scanf("%d", &amp;y);</p>
<p>sum = x + y; // 计算 'x' 和 'y' 的和</p>
<p>// 打印和<br/> printf("\n上述两个整数的和 = %d\n", sum);</p>
<p>return 0; // 表示程序成功执行<br/>}</p>
<p><img alt="" height="76" src="/images/螢幕擷取畫面 2023-12-21 033217.png" width="200"/></p>
<p> </p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() <br/>{<br/> int x, y, result; // 声明变量，用于存储两个整数及它们的乘积</p>
<p>// 提示用户输入，并将其存储在 'x' 中<br/> printf("\n输入第一个整数："); <br/> scanf("%d", &amp;x);</p>
<p>// 提示用户输入，并将其存储在 'y' 中<br/> printf("\n输入第二个整数：");<br/> scanf("%d", &amp;y);</p>
<p>result = x * y; // 计算 'x' 和 'y' 的乘积</p>
<p>// 打印乘积<br/> printf("上述两个整数的乘积 = %d\n", result);</p>
<p>return 0; // 表示程序成功执行<br/>}</p>
<p><img alt="" height="80" src="/images/螢幕擷取畫面 2023-12-21 033530.png" width="200"/></p>
<p><span class="hljs-meta"></span></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>